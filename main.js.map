{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/guards/auth.guard.ts","webpack:///./src/app/guards/permission.guard.ts","webpack:///./src/app/interceptors/http-header-proxy.ts","webpack:///./src/app/material.module.ts","webpack:///./src/app/models/attestation.model.ts","webpack:///./src/app/models/diagnose.model.ts","webpack:///./src/app/models/prescription.model.ts","webpack:///./src/app/models/request.model.ts","webpack:///./src/app/models/treatment.model.ts","webpack:///./src/app/services/crypto.service.ts","webpack:///./src/app/services/key-generator.ts","webpack:///./src/app/services/request.service.ts","webpack:///./src/app/services/rsamodule.ts","webpack:///./src/app/services/state.service.ts","webpack:///./src/app/services/storage.service.ts","webpack:///./src/app/services/treatment.service.ts","webpack:///./src/app/services/user.service.ts","webpack:///./src/app/views/access-request-details-user/access-request-details-user.component.css","webpack:///./src/app/views/access-request-details-user/access-request-details-user.component.html","webpack:///./src/app/views/access-request-details-user/access-request-details-user.component.ts","webpack:///./src/app/views/access-request-details/access-request-details.component.css","webpack:///./src/app/views/access-request-details/access-request-details.component.html","webpack:///./src/app/views/access-request-details/access-request-details.component.ts","webpack:///./src/app/views/access-request-result-treatment/access-request-result-treatment.component.css","webpack:///./src/app/views/access-request-result-treatment/access-request-result-treatment.component.html","webpack:///./src/app/views/access-request-result-treatment/access-request-result-treatment.component.ts","webpack:///./src/app/views/access-request-result/access-request-result.component.css","webpack:///./src/app/views/access-request-result/access-request-result.component.html","webpack:///./src/app/views/access-request-result/access-request-result.component.ts","webpack:///./src/app/views/access-request-treatment-editor/access-request-treatment-editor.component.css","webpack:///./src/app/views/access-request-treatment-editor/access-request-treatment-editor.component.html","webpack:///./src/app/views/access-request-treatment-editor/access-request-treatment-editor.component.ts","webpack:///./src/app/views/access-request/access-request.component.css","webpack:///./src/app/views/access-request/access-request.component.html","webpack:///./src/app/views/access-request/access-request.component.ts","webpack:///./src/app/views/login/login.component.css","webpack:///./src/app/views/login/login.component.html","webpack:///./src/app/views/login/login.component.ts","webpack:///./src/app/views/patient-overview/patient-overview.component.css","webpack:///./src/app/views/patient-overview/patient-overview.component.html","webpack:///./src/app/views/patient-overview/patient-overview.component.ts","webpack:///./src/app/views/patient-treatment/patient-treatment.component.css","webpack:///./src/app/views/patient-treatment/patient-treatment.component.html","webpack:///./src/app/views/patient-treatment/patient-treatment.component.ts","webpack:///./src/app/views/qr-code-scanner/qr-code-scanner.component.css","webpack:///./src/app/views/qr-code-scanner/qr-code-scanner.component.html","webpack:///./src/app/views/qr-code-scanner/qr-code-scanner.component.ts","webpack:///./src/app/views/qr-code/qr-code.component.css","webpack:///./src/app/views/qr-code/qr-code.component.html","webpack:///./src/app/views/qr-code/qr-code.component.ts","webpack:///./src/app/views/treatment-list/treatment-list.component.css","webpack:///./src/app/views/treatment-list/treatment-list.component.html","webpack:///./src/app/views/treatment-list/treatment-list.component.ts","webpack:///./src/app/views/treatment/treatment.component.css","webpack:///./src/app/views/treatment/treatment.component.html","webpack:///./src/app/views/treatment/treatment.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"  .hl-container {\\n    display: flex;\\n    flex-direction: column;\\n    position: absolute;\\n    top: 0;\\n    bottom: 0;\\n    left: 0;\\n    right: 0;\\n  }\\n\\n  .hl-is-mobile .hl-toolbar {\\n    position: fixed;\\n    /* Make sure the toolbar will stay on top of the content as it scrolls past. */\\n    z-index: 2;\\n  }\\n\\n  .hl-sidenav-container {\\n    /* When the sidenav is not fixed, stretch the sidenav container to fill the available space. This\\n       causes `<mat-sidenav-content>` to act as our scrolling element for desktop layouts. */\\n    flex: 1;\\n  }\\n\\n  .hl-is-mobile .hl-sidenav-container {\\n    /* When the sidenav is fixed, don't constrain the height of the sidenav container. This allows the\\n       `<body>` to be our scrolling element for mobile layouts. */\\n    flex: 1 0 auto;\\n  }\\n\\n  .hl-toolbar-filler{\\n    /* This fills the remaining space, by using flexbox.\\n       Every toolbar row uses a flexbox row layout. */\\n    flex: 1 1 auto;\\n  }\\n\\n  .hl-toolbar-icon{\\n       margin-right:10px;\\n  }\\n\\n  .mat-drawer-content {\\n    padding: 15px;\\n  }\\n\\n\"","module.exports = \"<div class=\\\"hl-container\\\">\\n\\n  <mat-toolbar color=\\\"primary\\\" class=\\\"hl-toolbar\\\">\\n    <button mat-icon-button (click)=\\\"sidenav.toggle()\\\" *ngIf=\\\"this.state.user?.type == 'Patient'\\\">\\n      <mat-icon>menu</mat-icon>\\n    </button>\\n\\n    <span>Health Ledger</span>\\n\\n    <span class=\\\"hl-toolbar-filler\\\"></span>\\n\\n    <mat-icon class=\\\"hl-toolbar-icon\\\" *ngIf=this.state.user>account_circle</mat-icon>\\n    <span>\\n      {{(this.state.user?.name.length>12)? (this.state.user?.name | slice:0:12)+'..':(this.state.user?.name) }}\\n    </span>\\n    <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\" *ngIf=this.state.user>\\n      <mat-icon>more_vert</mat-icon>\\n    </button>\\n    <mat-menu #menu=\\\"matMenu\\\">\\n      <button mat-menu-item (click)=\\\"logout()\\\">\\n        <mat-icon>exit_to_app</mat-icon>\\n        <span>Ausloggen</span>\\n      </button>\\n    </mat-menu>\\n\\n  </mat-toolbar>\\n\\n  <mat-sidenav-container class=\\\"hl-sidenav-container\\\">\\n    <mat-sidenav #sidenav mode=\\\"over\\\" [(opened)]=\\\"opened\\\" (click)=\\\"sidenav.close()\\\">\\n      <mat-nav-list>\\n        <a mat-list-item routerLink=\\\"./patient-overview\\\">\\n          <mat-icon class=\\\"hl-toolbar-icon\\\">folder</mat-icon>Krankenakte</a>\\n        <a mat-list-item routerLink=\\\"./access-requests\\\">\\n          <mat-icon class=\\\"hl-toolbar-icon\\\">notifications</mat-icon>Einsichtsanfragen</a>\\n        <a mat-list-item routerLink=\\\"./qr-code\\\">\\n          <mat-icon class=\\\"hl-toolbar-icon\\\">gradient</mat-icon>QR-Code</a>\\n      </mat-nav-list>\\n    </mat-sidenav>\\n\\n    <mat-sidenav-content>\\n      <router-outlet></router-outlet>\\n    </mat-sidenav-content>\\n\\n  </mat-sidenav-container>\\n\\n</div>\"","import { StateService } from './services/state.service';\nimport { Component } from '@angular/core';\nimport { MatSidenav } from '@angular/material';\nimport { CommonModule } from '@angular/common'; \nimport { PermissionGuard } from './guards/permission.guard';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n  name = '';\n\n  constructor(public state: StateService) {\n  }\n\n  get IsPatient():boolean {\n    return this.state.user.type == \"Patient\";\n  }\n\n  permissionSmartRecipe(): boolean {\n    return this.itemIsAviableForUser('smart-recipe-overview');\n  }\n\n  permissionDiagnostic(): boolean{\n    return this.itemIsAviableForUser('diagnostics');\n  }\n\n  permissionPatientOverview(): boolean{\n    return this.itemIsAviableForUser('patient-overview');\n  }\n\n  permissionHealthRecordUser(): boolean{\n    return this.itemIsAviableForUser('health-record-user');\n  }\n\n  permissionEmployeeOverview(): boolean{\n    return this.itemIsAviableForUser('employee-overview');\n  }\n\n  permissionAccessRequest(): boolean{\n    return this.itemIsAviableForUser('access-requests');\n  }\n\n  permissionSickNote(): boolean{\n    return this.itemIsAviableForUser('sick-note-overview');\n  }\n\n  permissionQrCode(): boolean{\n    return this.itemIsAviableForUser('qr-code');\n  }\n\n  permissionQrCodeScanner(): boolean{\n    return this.itemIsAviableForUser('qr-code-scanner');\n  }\n\n  permissionLogin(): boolean{\n    if(this.state.user == undefined){\n      return true;\n    }\n    else{\n      if(PermissionGuard.permissions[this.state.user.type.toLowerCase()].includes('smart-recipe-overview'))\n        return true;\n    }\n    return false;\n  }\n\n  private itemIsAviableForUser(sideBarItem: string): boolean{\n    if(this.state.user == undefined){\n      return false;\n    }\n    else{\n      if(PermissionGuard.permissions[this.state.user.type.toLowerCase()].includes(sideBarItem))\n        return true;\n    }\n    return false;\n  }\n\n  logout() {\n    this.state.invalidate();\n  }\n}\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {RouterModule, Routes} from '@angular/router';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {HttpClientModule, HTTP_INTERCEPTORS} from '@angular/common/http';\n\nimport {AppComponent} from './app.component';\nimport {MaterialModule} from './material.module';\n\nimport {QRCodeModule} from 'angularx-qrcode';\nimport {ZXingScannerModule} from '@zxing/ngx-scanner';\n\nimport {LoginComponent} from './views/login/login.component';\n\nimport {PatientOverviewComponent} from './views/patient-overview/patient-overview.component';\nimport {PatientTreatmentComponent} from './views/patient-treatment/patient-treatment.component';\n\nimport {AccessRequestComponent} from './views/access-request/access-request.component';\nimport {AccessRequestDetailsUserComponent} from './views/access-request-details-user/access-request-details-user.component';\nimport {AccessRequestDetailsComponent} from './views/access-request-details/access-request-details.component';\nimport { AccessRequestResultComponent } from './views/access-request-result/access-request-result.component';\nimport { AccessRequestResultTreatmentComponent } from './views/access-request-result-treatment/access-request-result-treatment.component';\nimport { AccessRequestTreatmentEditorComponent } from './views/access-request-treatment-editor/access-request-treatment-editor.component';\n\nimport { TreatmentListComponent } from './views/treatment-list/treatment-list.component';\nimport { TreatmentComponent } from './views/treatment/treatment.component';\n\nimport {QrCodeComponent} from './views/qr-code/qr-code.component';\nimport {QrCodeScannerComponent} from './views/qr-code-scanner/qr-code-scanner.component';\nimport {HttpHeaderProxy} from './interceptors/http-header-proxy';\nimport {AuthGuard} from './guards/auth.guard';\nimport {PermissionGuard} from './guards/permission.guard';\n\n\nconst appRoutes: Routes = [\n  {path: 'login', component: LoginComponent},\n  {\n    path: '', canActivate: [AuthGuard], canActivateChild: [PermissionGuard], children: [\n      {path: 'patient-overview', component: PatientOverviewComponent},\n      {path: 'patient-treatment/:id', component: PatientTreatmentComponent},\n      {path: 'access-requests', component: AccessRequestComponent},\n      {path: 'access-request-details-user/:id', component: AccessRequestDetailsUserComponent},\n      {path: 'access-request-details/:key/:name', component: AccessRequestDetailsComponent},\n\n      {path: 'access-request-result/:id', component: AccessRequestResultComponent},\n      {path: 'access-request-result-treatment/:request/:treatment', component: AccessRequestResultTreatmentComponent},\n\n      {path: 'access-request-treatment-editor/:id', component: AccessRequestTreatmentEditorComponent},\n      \n      {path: 'qr-code', component: QrCodeComponent},\n      {path: 'qr-code-scanner', component: QrCodeScannerComponent}\n    ]\n  },\n  {\n    path: '',\n    redirectTo: '/login',\n    pathMatch: 'full'\n  }\n];\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n\n    PatientOverviewComponent,\n    PatientTreatmentComponent,\n    \n    AccessRequestComponent,\n    AccessRequestDetailsUserComponent,\n    AccessRequestDetailsComponent,\n    AccessRequestResultComponent,\n    AccessRequestResultTreatmentComponent,\n    AccessRequestTreatmentEditorComponent,\n    \n    QrCodeComponent,\n    QrCodeScannerComponent,\n    \n    TreatmentListComponent,\n    TreatmentComponent\n  ],\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      //{enableTracing: true} // <-- debugging purposes only\n    ),\n    BrowserModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    FlexLayoutModule,\n    FormsModule, ReactiveFormsModule,\n    QRCodeModule,\n    ZXingScannerModule.forRoot(),\n    HttpClientModule\n  ],\n  exports: [],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: HttpHeaderProxy,\n      multi: true\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { StateService } from '../services/state.service';\nimport { Router } from \"@angular/router\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n    constructor(private stateService: StateService, private router: Router){}\n\n    canActivate(\n        next: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot): boolean {\n            if(!this.stateService.user){\n                console.log(\"Not logged in!\");\n                this.router.navigate(['/login']);\n                return false;\n            }\n        return true;\n      }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { StateService } from '../services/state.service';\nimport { Router } from \"@angular/router\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PermissionGuard implements CanActivateChild {\n\n    static permissions = {\n        patient: ['patient-overview', 'patient-treatment', 'access-requests', 'access-request-details-user', 'access-request-result', 'access-request-result-treatment', 'qr-code'],\n        arzt: ['access-requests', 'access-request-result', 'access-request-details', 'access-request-treatment-editor', 'access-request-result-treatment', 'qr-code-scanner'],\n        versicherung: ['access-requests', 'access-request-result', 'access-request-details', 'access-request-result-treatment','qr-code-scanner'],\n        apotheke: ['access-requests', 'access-request-result', 'access-request-details', 'access-request-result-treatment', 'qr-code-scanner'],\n        arbeitgeber: ['access-requests', 'access-request-result', 'access-request-details', 'access-request-result-treatment', 'qr-code-scanner']\n        };\n\n    constructor(private stateService: StateService, private router: Router){}\n\n    canActivateChild(\n        next: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot): boolean {\n            if(this.stateService.user){\n                if(PermissionGuard.permissions[this.stateService.user.type.toLowerCase()].includes(state.url.split('/')[1])){\n                    return true;\n                } else {\n                    console.log(\"Role \\\"\" + this.stateService.user.type + \"\\\" is not authorized to access this view! Redirecting...\");\n                    this.router.navigate(['/login']);\n                    return false;\n                }\n            }\n        return false;\n      }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { StorageService } from '../services/storage.service'\nimport { StateService } from '../services/state.service';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/add/observable/throw'\nimport 'rxjs/add/operator/catch';\n\n\n@Injectable()\nexport class HttpHeaderProxy implements HttpInterceptor {\n    constructor(private stateService: StateService, private storageService: StorageService) { }\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        let authReq = undefined;\n        let cert = this.storageService.getItem(\"FabricCert\");\n        if(cert){\n          let pubkey = this.storageService.getItem(\"L2PublicKey\");\n          pubkey = pubkey.replace(/\\n/g, \"\\\\n\");\n          let crypto = `{ \"fabricCert\":${cert}, \"pubKey\":\"${pubkey}\" }`;\n\n          crypto = btoa(crypto);\n\n          authReq = req.clone({ headers: req.headers.set(\"Crypto\", crypto)});\n        } else {\n            authReq = req.clone({ headers: req.headers});\n        }\n        return next.handle(authReq).catch((error, caught) => {\n            if (error.status === 401) {\n                this.stateService.invalidate();\n            }\n            return Observable.throw(error);\n        }) as any;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { MatProgressButtons } from 'mat-progress-buttons';\n\nimport {\n  MatButtonModule,\n  MatMenuModule,\n  MatToolbarModule,\n  MatIconModule,\n  MatCardModule,\n  MatListModule,\n  MatSidenavModule,\n  MatCheckboxModule,\n  MatDatepickerModule,\n  MatExpansionModule,\n  MatFormFieldModule,\n  MatNativeDateModule,\n  MatTableModule,\n  MatInputModule,\n  MatOptionModule,\n  MatProgressBarModule,\n  MatProgressSpinnerModule,\n  MatSelectModule,\n  MatSnackBarModule,\n  MAT_DATE_LOCALE\n} from '@angular/material';\n\n@NgModule({\n  imports: [\n    MatButtonModule,\n    MatMenuModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatCardModule,\n    MatSidenavModule,\n    MatListModule,\n    MatCheckboxModule,\n    MatDatepickerModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatNativeDateModule,\n    MatTableModule,\n    MatInputModule,\n    MatOptionModule, MatSelectModule\n  ],\n  exports: [\n    MatButtonModule,\n    MatMenuModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatCardModule,\n    MatSidenavModule,\n    MatListModule,\n    MatCheckboxModule,\n    MatDatepickerModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatNativeDateModule,\n    MatTableModule,\n    MatInputModule,\n    MatOptionModule,\n    MatProgressBarModule,\n    MatProgressButtons,\n    MatProgressSpinnerModule,\n    MatSelectModule,\n    MatSnackBarModule\n  ],\n  providers: [\n    {provide: MAT_DATE_LOCALE, useValue: 'de-DE'}\n  ]\n})\nexport class MaterialModule {}\n","export class Attestation {\n  from: Date;\n  to: Date;\n}\n","export class Diagnose {\n  title: string;\n  description: string;\n}\n","export class Prescription {\n  drug: string;\n  dosage: string;\n  note: string;\n}\n","import {Result} from '../models/result.model';\n\nimport { v4 as uuid } from 'uuid';\n\nexport class Request {\n  id: string;\n  date: Date;\n\n  name: string;\n  publicKey: string;\n\n  title: string;\n  since: Date;\n\n  treatment: boolean;\n  attestation: boolean;\n  recipe: boolean;\n\n  Result: Result;\n\n  constructor() {\n    this.id = uuid();\n    this.date = new Date();\n  }\n}\n","import {Prescription} from './prescription.model';\nimport {Attestation} from '../models/attestation.model';\nimport {Diagnose} from './diagnose.model';\n\nimport { v4 as uuid } from 'uuid';\n\nexport class Treatment {\n  id: string;\n  date: Date;\n  doctor: string;\n  diagnose: Diagnose;\n  prescription: Prescription;\n  attestation: Attestation;\n\n  constructor() {\n    this.id = uuid();\n    this.date = new Date();\n  }\n}","import { RSAModule } from './rsamodule'\nimport { KeyGenerator } from './key-generator'\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CryptoService {\n    rsaMod = new RSAModule();\n    keyGenerator = new KeyGenerator();\n\n    constructor() {}\n\n    public encryptData(obj: object, pubkey: string):void {\n        if (!pubkey || 0 === pubkey.length) {throw Error(\"No Key provided!\");}\n        if (!obj) {throw Error(\"No Object provided!\");}\n        this.rsaMod.encryptData(obj, pubkey);\n    }\n\n    public decryptData(obj: object, privkey: string):void {\n        if (!privkey || 0 === privkey.length) {throw Error(\"No Private Key provided!\");}\n        if (!obj) {throw Error(\"No Object provided!\");}\n        this.rsaMod.decryptData(obj, privkey);\n    }\n\n    /*\n    * Generates a properly formatted RSA Keypair for the level 2 encryption.\n    * Returns a list containig both keys. First element is private key, second is public.\n    */\n    public generateKeyPair():string[]{\n        return this.keyGenerator.generateKeyPair();\n    }\n}\n","import * as Encrypt from 'jsencrypt';\n\nexport class KeyGenerator {\n\n    constructor(){}\n\n    public generateKeyPair():string[] {\n        let jscrypto = new Encrypt.JSEncrypt();\n        let privatekey = jscrypto.getPrivateKey();\n        let publickey = jscrypto.getPublicKey();\n        return [privatekey, publickey];\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport {Request} from '../models/request.model';\nimport {Result} from '../models/result.model';\nimport {StateService} from './state.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RequestService {\n  private col:string = \"request\";\n\n  constructor(private http:HttpClient,\n              private stateService:StateService) { }\n\n  get(): Observable<Request[]> {\n    return this.http.get(`${environment.host}${this.col}`)\n                    .map(res=>{return res as Request[]});\n  }\n\n  post(pubKey: string, request: Request): Observable<boolean> {\n\n    let reciever = Object.assign({}, request) as Request;\n    let sender = Object.assign({}, request) as Request;\n\n    reciever.publicKey = this.stateService.user.publicKey;\n    reciever.name = this.stateService.user.name;\n\n    let req1 = this.http.post(`${environment.host}${this.col}`, {publicKey: sender.publicKey, request: reciever});\n    let req2 = this.http.post(`${environment.host}${this.col}`, {publicKey: reciever.publicKey, request: sender});\n\n    return req1.concatMap(res => req2).map(res => true);\n  }\n\n  put(pubKey: string, requestId:string, result:Result): Observable<boolean> {\n\n    let reciever = Object.assign({}, result) as Result;\n    let sender = Object.assign({}, result) as Result;\n\n\n    let req1 = this.http.put(`${environment.host}${this.col}`, {publicKey: pubKey, requestId:requestId, result: reciever});\n    let req2 = this.http.put(`${environment.host}${this.col}`, {publicKey: this.stateService.user.publicKey, requestId:requestId, result: sender});\n\n    return req1.concatMap(res => req2).map(res => true);\n  }\n}\n","import * as Encrypt from 'jsencrypt';\n\nexport class RSAModule {\n\n    constructor(){}\n\n    public encryptData(obj: object, pubkey: string):void {\n        if (!pubkey || 0 === pubkey.length) {throw Error(\"No Key provided!\");}\n        if (!obj) {throw Error(\"No Object provided!\");}\n\n        let jscrypto = new Encrypt.JSEncrypt();\n        jscrypto.setPublicKey(pubkey);\n        this.recursiveCrypt(obj, jscrypto)\n    }\n\n    public decryptData(obj: object, privkey: string):void {\n        if (!privkey || 0 === privkey.length) {throw Error(\"No Private Key provided!\");}\n        if (!obj) {throw Error(\"No Object provided!\");}\n\n        let jscrypto = new Encrypt.JSEncrypt();\n        jscrypto.setPrivateKey(privkey);\n        this.recursiveCrypt(obj, jscrypto, true)\n    }\n\n    /**\n    * recursiveCrypt - Recursively encrypts or decrypts all attribute\n    * fields of an object and its nested members. Ignores members starten with an underscore (eg. \"_id\").\n    * Attribute types are stored in a helper object which replaces the original field value.\n    * Simple types are restored upon decryption.\n    *\n    * @param  {Object} obj The object to be decrypted/encrypted\n    * @param  {JSEncrypt} jsencrypt_instance An instance of JSEncrypt with initialized key.\n    * @param  {boolean} decryptFlag=false  Flag to determine encryption (default) or decryption\n    */\n    private recursiveCrypt(obj, jsencrypt_instance, decryptFlag=false):void {\n        for (var property in obj) { // iterate over all properties of the object\n            if(!property.toString().startsWith(\"_\") && (obj[property] != null)){ //exclude fields starting with an underscore\n                if (obj.hasOwnProperty(property)) { // exclude inherited fields\n                    if (typeof obj[property] == \"object\" && !(obj[property] instanceof encObj)) {\n                        // recursively call the function for all members which are non-primitive\n                        // and not the helper object replacing an original value\n                        this.recursiveCrypt(obj[property], jsencrypt_instance, decryptFlag);\n                    } else {\n                        // in case of a primitive type or helper object\n                        if(decryptFlag == false){\n                            let dtype = typeof(obj[property]); // save the value type for later reconstruction\n                            let val = jsencrypt_instance.encrypt(String(obj[property])); // encrypt the value\n                            // replace the value with a helper object containing its type and encrypted string\n                            obj[property] = new encObj(val, dtype);\n                        } else {\n                            // decrypt the value string\n                            obj[property].val = jsencrypt_instance.decrypt(obj[property].val);\n                            // restore its original type\n                            obj[property] = this.reconstructType(obj[property]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n    * reconstructType - Helper function to restore the original type of an encObj.\n    *\n    * @param  {encObj} _encObj Decrypted encObj instance\n    * @return {number, boolean, string} _encObj.val casted to _encObj.dtype\n    */\n    private reconstructType(_encObj: encObj):object {\n        let castedObj = null;\n        switch(_encObj.dtype) {\n            case \"number\":\n                castedObj = Number(_encObj.val);\n                break;\n            case \"boolean\":\n                castedObj = (_encObj.val == \"true\");\n                break;\n            default:\n                castedObj = _encObj.val;\n        }\n        return castedObj;\n    }\n\n}\n\n/**\n* Helper object to replace field values with their\n* encrypted string representation and their original type\n*/\nexport class encObj {\n    val: string;\n    dtype: string;\n    constructor(val, dtype) {\n        this.val = val;\n        this.dtype = dtype;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { User } from '../models/user.model.interface';\nimport { Router } from \"@angular/router\";\nimport { StorageService } from './storage.service';\nimport { CryptoService } from './crypto.service';\nimport { UserService } from './user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StateService {\n\n  public user: User;\n\n  static default_pages = {patient: '/patient-overview',\n                            arzt: '/access-requests',\n                            versicherung: '/access-requests',\n                            apotheke: '/access-requests',\n                            arbeitgeber: '/access-requests'};\n\n  constructor(private router: Router,\n      private storage: StorageService,\n      private userService: UserService,\n      private cryptoService: CryptoService) { }\n\n  /*\n  * Removes the User Fabric Certificate from Storage Service which constitutes a logout of the current user.\n  */\n  invalidate() {\n      if (this.storage.getItem(\"FabricCert\")) {\n          this.storage.removeItem(\"FabricCert\");\n      }\n      if (this.storage.getItem(\"L2PublicKey\")) {\n          this.storage.removeItem(\"L2PublicKey\");\n      }\n      if (this.storage.getItem(\"L2PrivateKey\")) {\n          this.storage.removeItem(\"L2PrivateKey\");\n      }\n      this.user = undefined;\n      console.log('Fabric Certificate was invalidated and L2-Keys removed! Logging out...');\n      this.router.navigate(['/login']);\n  }\n\n\n  /*\n  * Login by providing a valid Fabric User Certificate.\n  * Generates and stores an L2 encryption key pair if no keys are found.\n  */\n  login(cert: string) {\n      if (!cert || 0 === cert.length) {console.log(\"No Certificate provided to stateService.login()!\"); return;}\n\n      //alway creates new keys on login\n      let keys = this.cryptoService.generateKeyPair();\n\n      this.storage.setItem(\"FabricCert\", cert);\n      this.storage.setItem(\"L2PrivateKey\", keys[0]);\n      this.storage.setItem(\"L2PublicKey\", keys[1]);\n\n      this.userService.post().subscribe(\n          (user) => {\n              this.user = user;\n              console.log(\"Logged in! Welcome, \" + this.user.name + \"!\");\n              this.router.navigate([StateService.default_pages[this.user.type.toLowerCase()]]);\n          }, (err) => console.log(err)\n      );\n  }\n\n  /*\n  * To be called on load. Authorizes user from stored certificate.\n  */\n  autoLoginFromStorage(){\n      if(this.storage.getItem(\"FabricCert\") && this.storage.getItem(\"L2PublicKey\")){\n        this.userService.get().subscribe(\n            (user) => {\n                this.user = user;\n                console.log(\"Logged in! Welcome, \" + this.user.name + \"!\");\n                this.router.navigate([StateService.default_pages[this.user.type.toLowerCase()]]);\n            }, (err) => console.log(err)\n        );\n      }\n  }\n\n}\n","import {Injectable} from '@angular/core';\n\n/**\n * Wrapper service for crud operations on the local Storage\n */\n\n@Injectable({\n    providedIn: 'root',\n  })\nexport class StorageService {\n\n    constructor() { }\n\n    /**\n     * Clears the whole localStorage for the application\n     */\n    clear(): void {\n        localStorage.clear();\n    }\n\n    /**\n     * Gets an item with the given key from the localStorage\n     * @param key The key to get the value from the localStorage\n     * @return {any} The value for the given key if exists, otherwise null\n     */\n    getItem(key: string): string {\n        return localStorage.getItem(key);\n    }\n\n    /**\n     * Gets the literal key on the given index in the localStorage\n     * @param index The index in the localStorage to retrieve the literal key for\n     * @return {string} The literal key for the given index\n     */\n    key(index: number): string {\n        return localStorage.key(index);\n    }\n\n    /**\n     * Removes an item with the given key from the localStorage\n     * @param key The key of the item to remove\n     */\n    removeItem(key: string): void {\n        localStorage.removeItem(key);\n    }\n\n    /**\n     * Sets an item for the given key in the localStorage\n     * @param key The key of the item to set\n     * @param value The value of the item to in the localStorage\n     */\n    setItem(key: string, value: string): void {\n        localStorage.setItem(key, value);\n    }\n}","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport {Treatment} from '../models/treatment.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TreatmentService {\n  private col:string = \"treatment\";\n\n  constructor(private http:HttpClient) { }\n\n  get (): Observable<Treatment[]> {\n    return this.http.get(`${environment.host}${this.col}`)\n                    .map(res=>{return res as Treatment[]});\n  }\n\n  post(pub_key: string, treatment: Treatment): Observable<boolean> {\n    return this.http.post(`${environment.host}${this.col}`, {publicKey: pub_key, treatment: treatment})\n                    .map(res=>{return true;})\n  }\n\n  postRedeem(pub_key: string, treatmentId: string): Observable<boolean> {\n    return this.http.post(`${environment.host}${this.col}/redeem`, {publicKey: pub_key, treatmentId: treatmentId})\n                    .map(res=>{return true;})\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport {User} from '../models/user.model.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private col:string = \"user\";\n\n  constructor(private http:HttpClient) { }\n\n  get(): Observable<User> {\n    return this.http.get(`${environment.host}${this.col}`)\n                    .map(res=>{return res as User});\n  }\n\n  post(): Observable<User> {\n    return this.http.post(`${environment.host}${this.col}`, {})\n                    .map(res=>{return res as User});\n  }\n}\n","module.exports = \"td {\\n    min-height: 18px;\\n}\"","module.exports = \"<div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"space-around stretch\\\" >\\n  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" >\\n    <spinner-button [options]=\\\"saveButtonOptions\\\" (click)=\\\"onSave()\\\"></spinner-button>\\n    <spinner-button [options]=\\\"rejectButtonOptions\\\" (click)=\\\"decline()\\\"></spinner-button>\\n    <button mat-raised-button routerLink=\\\"/access-requests\\\">Zurück</button>\\n  </div>\\n  <br>\\n  <mat-form-field>\\n    <input matInput placeholder=\\\"Anfrage von:\\\" [value]=\\\"request?.name\\\" readonly>\\n  </mat-form-field>\\n  <mat-form-field>\\n    <input matInput placeholder=\\\"Einsicht ab:\\\" [value]=\\\"request?.since | date:'dd.MM.yyyy'\\\" readonly>\\n  </mat-form-field>\\n  <mat-form-field>\\n    <input matInput placeholder=\\\"Kategorie\\\" [value]=\\\"request?.title === undefined ? 'Alles' : request?.title\\\" readonly>\\n  </mat-form-field>\\n  <h2 class=\\\"mat-h2\\\">Behandlungen</h2>\\n  <table mat-table [dataSource]=\\\"ds\\\" class=\\\"mat-elevation-z8\\\">\\n\\n    <ng-container matColumnDef=\\\"title\\\">\\n      <th mat-header-cell *matHeaderCellDef> Bezeichnung </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\" data-label=\\\"Behandlung\\\"> {{element.item.diagnose.title}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"diagnose\\\">\\n      <th mat-header-cell *matHeaderCellDef> Diagnose </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\" data-label=\\\"Diagnose\\\">\\n        <mat-checkbox [(ngModel)]=\\\"element.treatment\\\"></mat-checkbox>\\n      </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"recipe\\\">\\n      <th mat-header-cell *matHeaderCellDef> Rezept </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\" data-label=\\\"Rezept\\\">\\n        <mat-checkbox [(ngModel)]=\\\"element.recipe\\\"></mat-checkbox>\\n      </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"attestation\\\">\\n      <th mat-header-cell *matHeaderCellDef> Arbeitsunfähigkeit </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\" data-label=\\\"Arbeitsunfähigkeit\\\">\\n        <mat-checkbox [(ngModel)]=\\\"element.attestation\\\"></mat-checkbox>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"['title', 'diagnose', 'recipe', 'attestation']\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: ['title', 'diagnose', 'recipe', 'attestation'];\\\"></tr>\\n  </table>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {MatTableDataSource} from '@angular/material';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Request} from '../../models/request.model';\nimport {Treatment} from '../../models/treatment.model';\nimport {RequestService} from '../../services/request.service';\nimport {TreatmentService} from '../../services/treatment.service';\nimport { Result } from '../../models/result.model';\n\n@Component({\n  selector: 'app-access-request-details-user',\n  templateUrl: './access-request-details-user.component.html',\n  styleUrls: ['./access-request-details-user.component.css']\n})\nexport class AccessRequestDetailsUserComponent implements OnInit {\n  private request:Request;\n  private ds:MatTableDataSource<ListItem>;\n\n  saveButtonOptions: any = {\n    active: false,\n    text: 'Annehmen',\n    spinnerSize: 18,\n    raised: true,\n    buttonColor: 'primary',\n    spinnerColor: 'accent'\n  };\n\n\n  rejectButtonOptions: any = {\n    active: false,\n    text: 'Ablehnen',\n    spinnerSize: 18,\n    raised: true,\n    buttonColor: 'accent',\n    spinnerColor: 'primary'\n  };\n\n  constructor(private requestService: RequestService,\n              private treatmentService: TreatmentService,\n              private route: ActivatedRoute,\n              private router: Router) {\n    this.route.params.map(p => p.id).subscribe(id => {\n      this.treatmentService.get().subscribe(treatments => {\n        this.requestService.get().subscribe(requests => this.refreshData(treatments, requests, id))\n      });\n    });\n  }\n\n  refreshData(treatments:Treatment[], requests: Request[], id: string) {\n    this.request = requests.find(r => r.id == id);\n    if(this.request == null)\n      return;\n\n    console.log(this.request);\n\n    const items = new Array<ListItem>();\n    for (const t of treatments) {\n      items.push(new ListItem(this.request, t));\n    }\n    this.ds = new MatTableDataSource(items);\n  }\n\n  ngOnInit() {\n  }\n\n  onSave() {\n    this.saveButtonOptions.active = true;\n    this.saveButtonOptions.text = 'Annehmen...';\n\n    let treatments = new Array<Treatment>();\n    for(const item of this.ds.data) {\n      let treatment = item.item;\n\n      if(!item.treatment)\n        treatment.diagnose = null;\n\n      if(!item.attestation)\n        treatment.attestation = null;\n\n      if(!item.recipe)\n        treatment.prescription = null;\n\n      if(treatment.diagnose == null && treatment.attestation == null && treatment.prescription == null)\n        continue;\n\n      treatments.push(treatment);\n    }\n\n    let result:Result = {\n      rejected: false,\n      reason: null,\n      treatment: treatments,\n    }\n\n    this.requestService.put(this.request.publicKey, this.request.id, result).subscribe(res=>{\n      this.router.navigate(['/access-requests']);\n    })\n  }\n\n  decline() {\n    this.rejectButtonOptions.active = true;\n    this.rejectButtonOptions.text = 'Ablehnen...';\n\n    let result: Result = {\n      rejected: true,\n      reason: 'abgelehnt',\n      treatment: null\n    };\n\n    this.requestService.put(this.request.publicKey, this.request.id,  result).subscribe(res => {\n      this.rejectButtonOptions.active = false;\n      this.rejectButtonOptions.text = 'Ablehnen';\n      this.router.navigate(['/access-requests']);\n    });\n  }\n\n}\n\nclass ListItem {\n  item: Treatment;\n  treatment: boolean;\n  recipe: boolean;\n  attestation: boolean;\n\n  constructor(request: Request, treatment: Treatment) {\n    this.item = treatment;\n    this.treatment = request.treatment;\n    this.recipe = request.recipe;\n    this.attestation = request.attestation;\n  }\n}\n","module.exports = \"\"","module.exports = \"<div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"space-around stretch\\\" >\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" >\\n      <spinner-button [options]=\\\"saveButtonOptions\\\" (click)=\\\"onSave()\\\"></spinner-button>\\n      <button mat-raised-button color=\\\"accent\\\" routerLink=\\\"/access-requests\\\">Zurück</button>\\n    </div>\\n    <br>\\n  <div fxLayout=\\\"row\\\">\\n    <mat-form-field class=\\\"example-full-width\\\">\\n      <input matInput placeholder=\\\"Anfrage von:\\\" [value]='stateService.user.name' readonly>\\n    </mat-form-field>\\n\\n    <mat-form-field>\\n      <input matInput placeholder=\\\"Anfrage an:\\\" [value]=\\\"request.name\\\" readonly>\\n    </mat-form-field>\\n  </div>\\n  <div>\\n    <mat-form-field>\\n      <input matInput [matDatepicker]=\\\"picker1\\\" (click)=\\\"picker1.open()\\\" placeholder=\\\"Einsicht ab:\\\" [(ngModel)]=\\\"request.since\\\" readonly>\\n      <mat-datepicker #picker1></mat-datepicker>\\n      <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\n    </mat-form-field>\\n\\n    <mat-form-field>\\n      <mat-select placeholder=\\\"Kategorie\\\" [(value)]=\\\"request.title\\\" required>\\n        <mat-option *ngFor=\\\"let item of details\\\" [value]=\\\"item.name\\\">\\n          {{item.name}}\\n        </mat-option>\\n      </mat-select>\\n    </mat-form-field>\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-around center\\\" >\\n      <mat-checkbox [(ngModel)]=\\\"request.treatment\\\">\\n        Diagnose\\n      </mat-checkbox>\\n      <mat-checkbox [(ngModel)]=\\\"request.recipe\\\">\\n        Rezept\\n      </mat-checkbox>\\n      <mat-checkbox [(ngModel)]=\\\"request.attestation\\\">\\n        Arbeitsunfähigkeit\\n      </mat-checkbox>\\n    </div>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {RequestService} from '../../services/request.service';\nimport {StateService} from '../../services/state.service';\nimport {Request} from '../../models/request.model';\n\n@Component({\n  selector: 'app-access-request-details',\n  templateUrl: './access-request-details.component.html',\n  styleUrls: ['./access-request-details.component.css']\n})\nexport class AccessRequestDetailsComponent implements OnInit {\n  \n  details = [\n    {name: 'Alles'},\n    {name: 'Allergie'},\n    {name: 'Akute Erkrankungen'},\n    {name: 'Chronische Erkrankungen'},\n    {name: 'Sonstiges'}\n  ];\n\n  saveButtonOptions: any = {\n    active: false,\n    text: 'Speichern',\n    spinnerSize: 18,\n    raised: true,\n    buttonColor: 'primary',\n    spinnerColor: 'accent'\n  };\n\n  request:Request;\n\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private stateService: StateService,\n              private requestService: RequestService) {\n\n    this.request = new Request();\n\n    this.route.params.map(p => p.key).subscribe(key => this.request.publicKey = key)\n    this.route.params.map(p => p.name).subscribe(name => this.request.name = name );\n  }\n\n  ngOnInit() {\n  }\n\n  onCancel() {\n    this.router.navigate(['./qr-code-scanner']);\n  }\n\n  onSave() {\n    this.saveButtonOptions.active = true;\n    this.saveButtonOptions.text = 'Speichere...';\n\n    this.requestService.post(this.request.publicKey, this.request).subscribe(res => {\n      this.router.navigate(['./access-requests']);\n    });\n\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"space-around stretch\\\">\\n  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\n      <div fxFlex=\\\"70\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" >\\n        <button mat-raised-button color=\\\"accent\\\" (click)=\\\"onClose()\\\">Zurück</button>\\n      </div>\\n      <div>\\n        <spinner-button [options]=\\\"redeemButtonOptions\\\" (click)=\\\"redeem()\\\" *ngIf=\\\"isPharmacy\\\"></spinner-button>\\n      </div>\\n  </div>\\n  <br/>\\n\\n  <app-treatment [treatment]=\\\"treatment\\\"></app-treatment>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { RequestService } from '../../services/request.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Request } from '../../models/request.model';\nimport { Treatment } from '../../models/treatment.model';\nimport { StateService } from '../../services/state.service';\nimport { TreatmentService } from '../../services/treatment.service';\nimport { MatSnackBar } from '@angular/material';\n\n\n\n@Component({\n  selector: 'app-access-request-result-treatment',\n  templateUrl: './access-request-result-treatment.component.html',\n  styleUrls: ['./access-request-result-treatment.component.css']\n})\nexport class AccessRequestResultTreatmentComponent implements OnInit {\n  isPharmacy = false;\n  request: Request;\n  treatment: Treatment;\n\n  redeemButtonOptions: any = {\n    active: false,\n    text: 'Einlösen',\n    spinnerSize: 18,\n    raised: true,\n    buttonColor: 'primary',\n    spinnerColor: 'accent'\n  };\n\n  constructor(private requestService: RequestService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private stateService: StateService,\n    private treatmentService: TreatmentService,\n    private snackBar: MatSnackBar) {\n    this.isPharmacy = stateService.user.type === 'Apotheke';\n\n    this.route.params.map(p => p.request).subscribe(requestId => {\n      this.route.params.map(p => p.treatment).subscribe(treatmentId => {\n        this.requestService.get().subscribe(requests => {\n          this.request = requests.find(r => r.id === requestId);\n          this.treatment = this.request.Result.treatment.find(t => t.id === treatmentId);\n\n          console.log(this.treatment);\n        });\n      });\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  onClose() {\n    this.router.navigate(['/access-request-result', this.request.id]);\n  }\n\n  openSnackBar(message: string, action: string) {\n    this.snackBar.open(message, action, {\n      verticalPosition: 'top'\n    });\n  }\n\n  redeem() {\n    this.redeemButtonOptions.active = true;\n    this.redeemButtonOptions.text = 'Löse ein...';\n\n    this.treatmentService.postRedeem(this.request.publicKey, this.treatment.id).subscribe(rest => {\n      this.redeemButtonOptions.active = false;\n      this.redeemButtonOptions.text = 'Einlösen';\n      this.openSnackBar('Rezept erfolgreich eingelöst!', 'Okay');\n    },\n      err => {\n        this.redeemButtonOptions.active = false;\n        this.redeemButtonOptions.text = 'Einlösen';\n        this.openSnackBar('Rezept wurde bereits eingelöst!', 'Okay');\n      });\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"space-around stretch\\\" >\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\n        <div fxFlex=\\\"70\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" >\\n            <button mat-raised-button color=\\\"accent\\\" routerLink=\\\"/access-requests\\\">Zurück</button>\\n        </div>\\n        <div>\\n          <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onNewTreatment()\\\" *ngIf=\\\"isDoctor\\\">Neue Behandlung</button>\\n          <button mat-raised-button (click)=\\\"showRequest()\\\" color=\\\"primary\\\" *ngIf=\\\"!isPatient\\\">Erneut anfragen</button>\\n        </div>\\n    </div>\\n    <br>\\n    <mat-form-field>\\n        <input matInput placeholder=\\\"Anfrage von:\\\" [value]=\\\"request?.name\\\" readonly>\\n    </mat-form-field>\\n    <mat-form-field>\\n        <input matInput placeholder=\\\"Einsicht ab:\\\" [value]=\\\"request?.since | date:'dd.MM.yyyy'\\\" readonly>\\n    </mat-form-field>\\n    <mat-form-field>\\n        <input matInput placeholder=\\\"Kategorie\\\" [value]=\\\"request?.title === undefined ? 'Alles' : request?.title\\\" readonly>\\n    </mat-form-field>\\n    <h2 class=\\\"mat-h2\\\">Behandlungen</h2>\\n    <app-treatment-list [treatments]=\\\"request?.Result.treatment\\\" (onSelected)=\\\"onSelected($event)\\\"></app-treatment-list>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Request } from '../../models/request.model';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { RequestService } from '../../services/request.service';\nimport { Treatment } from '../../models/treatment.model';\nimport { StateService } from '../../services/state.service';\n\n@Component({\n  selector: 'app-access-request-result',\n  templateUrl: './access-request-result.component.html',\n  styleUrls: ['./access-request-result.component.css']\n})\nexport class AccessRequestResultComponent implements OnInit {\n  request:Request;\n  isDoctor = false;\n  isPatient = false;\n\n  constructor(private requestService:RequestService,\n              private stateService:StateService,\n              private route:ActivatedRoute,\n              private router: Router) {\n    this.isDoctor = this.stateService.user.type == 'Arzt';\n    this.isPatient = this.stateService.user.type == 'Patient';\n\n    this.route.params.map(p => p.id).subscribe(id => {\n      this.requestService.get().subscribe(requests=>{\n        this.request = requests.find(r => r.id == id);\n      });\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  onSelected(treatment:Treatment) {\n\n    this.router.navigate(['access-request-result-treatment', this.request.id, treatment.id]);\n  }\n\n  onNewTreatment(){\n    this.router.navigate(['access-request-treatment-editor', this.request.id]);\n  }\n\n  showRequest(){\n    this.router.navigate(['access-request-details', this.request.publicKey, this.request.name]);\n  }\n}\n","module.exports = \"\"","module.exports = \"<div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"space-around stretch\\\" >\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" >\\n        <spinner-button [options]=\\\"saveButtonOptions\\\" (click)=\\\"onSave()\\\"></spinner-button>\\n        <button mat-raised-button color=\\\"accent\\\" (click)=\\\"onCancel()\\\">Zurück</button>\\n    </div>\\n    <br>\\n    <mat-card>\\n        <mat-card-title>Diagnose</mat-card-title>\\n        <mat-card-content>\\n            <mat-form-field>\\n                <input matInput placeholder=\\\"Bezeichnung\\\" [(ngModel)]=\\\"treatment?.diagnose.title\\\"/>\\n            </mat-form-field>\\n            <mat-form-field>\\n                <textarea matInput placeholder=\\\"Beschreibung\\\" [(ngModel)]=\\\"treatment?.diagnose.description\\\"></textarea>\\n            </mat-form-field>\\n        </mat-card-content>\\n    </mat-card>\\n\\n    <mat-card>\\n        <mat-card-title>\\n            <mat-checkbox [checked]=\\\"treatment?.prescription != null\\\" (change)=\\\"onPrescription($event)\\\"></mat-checkbox> Rezept\\n        </mat-card-title>\\n        <mat-card-content *ngIf=\\\"treatment?.prescription != null\\\">\\n            <mat-form-field>\\n                <input matInput placeholder=\\\"Wirkstoff\\\" [(ngModel)]=\\\"treatment?.prescription.drug\\\"/>\\n            </mat-form-field>\\n            <mat-form-field>\\n                <input matInput placeholder=\\\"Dosierung\\\" [(ngModel)]=\\\"treatment?.prescription.dosage\\\"/>\\n            </mat-form-field>\\n            <mat-form-field>\\n                <textarea matInput placeholder=\\\"Notiz\\\" [(ngModel)]=\\\"treatment?.prescription.note\\\"></textarea>\\n            </mat-form-field>\\n        </mat-card-content>\\n    </mat-card>\\n\\n    <mat-card>\\n        <mat-card-title>\\n            <mat-checkbox [checked]=\\\"treatment?.attestation != null\\\" (change)=\\\"onAttestation($event)\\\"></mat-checkbox> Arbeitsunfähigkeit\\n        </mat-card-title>\\n        <mat-card-content *ngIf=\\\"treatment?.attestation != null\\\">\\n\\n            <mat-form-field>\\n                <input matInput [matDatepicker]=\\\"picker1\\\" (click)=\\\"picker1.open()\\\" placeholder=\\\"Beginn\\\" [(ngModel)]=\\\"treatment?.attestation.from\\\" readonly />\\n                <mat-datepicker #picker1></mat-datepicker>\\n                <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\n            </mat-form-field>\\n            <mat-form-field>\\n                <input matInput [matDatepicker]=\\\"picker2\\\" (click)=\\\"picker2.open()\\\" placeholder=\\\"Ende\\\" [(ngModel)]=\\\"treatment?.attestation.to\\\" readonly />\\n                <mat-datepicker #picker2></mat-datepicker>\\n                <mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\"></mat-datepicker-toggle>\\n            </mat-form-field>\\n        </mat-card-content>\\n    </mat-card>\\n          \\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Treatment } from '../../models/treatment.model';\nimport { StateService } from '../../services/state.service';\nimport { Diagnose } from '../../models/diagnose.model';\nimport { TreatmentService } from '../../services/treatment.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Request } from '../../models/request.model';\nimport { RequestService } from '../../services/request.service';\nimport { Prescription } from '../../models/prescription.model';\nimport { Attestation } from '../../models/attestation.model';\n\n@Component({\n  selector: 'app-access-request-treatment-editor',\n  templateUrl: './access-request-treatment-editor.component.html',\n  styleUrls: ['./access-request-treatment-editor.component.css']\n})\nexport class AccessRequestTreatmentEditorComponent implements OnInit {\n  request:Request;\n  treatment:Treatment;\n\n  saveButtonOptions: any = {\n    active: false,\n    text: 'Speichern',\n    spinnerSize: 18,\n    raised: true,\n    buttonColor: 'primary',\n    spinnerColor: 'accent'\n  };\n\n  constructor(private stateService:StateService,\n              private router:Router,\n              private route:ActivatedRoute,\n              private requestService:RequestService,\n              private treatmentService:TreatmentService) { \n\n    this.treatment = new Treatment();\n    this.treatment.doctor = stateService.user.name;\n    this.treatment.diagnose = new Diagnose();\n\n    this.route.params.map(p => p.id).subscribe(id => {\n      this.requestService.get().subscribe(requests => {\n        this.request = requests.find(r => r.id == id);\n      })\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  onPrescription(state) {\n    if(state.checked == (this.treatment.prescription != null))\n      return;\n\n    this.treatment.prescription = state.checked ? new Prescription() : null;\n  }\n\n  onAttestation(state) {\n    if(state.checked == (this.treatment.attestation != null))\n      return;\n\n    this.treatment.attestation = state.checked ? new Attestation() : null;\n  }\n\n  onSave() {\n    this.saveButtonOptions.active = true;\n    this.saveButtonOptions.text = 'Speichere...';\n\n    this.treatmentService.post(this.request.publicKey, this.treatment).subscribe(rest => {\n      this.router.navigate(['/access-requests']);\n    });\n  }\n\n  onCancel(){\n    this.router.navigate(['/access-request-result', this.request.id]);\n  }\n}\n","module.exports = \"td {\\n    min-height: 18px;\\n}\"","module.exports = \"\\n<div fxLayout=\\\"column\\\">\\n  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\n    <mat-form-field fxFlex=\\\"70\\\">\\n      <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n    </mat-form-field>\\n    <div>\\n      <spinner-button [options]=\\\"reloadButtonOptions\\\" (click)=\\\"reloadData()\\\"></spinner-button>\\n      <button mat-raised-button (click)=\\\"showScanner()\\\" color=\\\"primary\\\" *ngIf=\\\"!isPatient\\\">Anfrage erstellen</button>\\n    </div>\\n  </div>\\n\\n  <table mat-table [dataSource]=\\\"ds\\\" class=\\\"mat-elevation-z8\\\">\\n\\n    <ng-container matColumnDef=\\\"date\\\">\\n      <th mat-header-cell *matHeaderCellDef> Datum </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\" data-label=\\\"Datum\\\"> {{element.date | date:'dd.MM.yyyy HH:mm'}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"name\\\">\\n      <th mat-header-cell *matHeaderCellDef> Name </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\" data-label=\\\"Name\\\"> {{element.name}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"status\\\">\\n      <th mat-header-cell *matHeaderCellDef> Status </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\" data-label=\\\"Status\\\"> {{element.Result == null ? \\\"Offen\\\" : element.Result.rejected ? \\\"Abgelehnt\\\" : \\\"Freigegeben\\\"}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"actions\\\">\\n      <th mat-header-cell *matHeaderCellDef> Aktionen </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\" data-label=\\\"Aktionen\\\">\\n          <button mat-raised-button (click)=\\\"showResult(element)\\\" *ngIf=\\\"element.Result\\\" [disabled]=\\\"element.Result.rejected\\\"> Einsehen</button>\\n          <button mat-raised-button (click)=\\\"accept(element)\\\" color=\\\"primary\\\" *ngIf=\\\"isPatient && !element.Result\\\"> Ansehen</button>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"['date', 'name', 'status', 'actions']\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: ['date', 'name', 'status', 'actions'];\\\"></tr>\\n  </table>\\n<div>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {MatTableDataSource} from '@angular/material';\nimport {RequestService} from '../../services/request.service';\nimport {Router} from '@angular/router';\nimport {Request} from '../../models/request.model';\nimport { StateService } from '../../services/state.service';\nimport { Result } from '../../models/result.model';\n\n@Component({\n  selector: 'app-access-request',\n  templateUrl: './access-request.component.html',\n  styleUrls: ['./access-request.component.css']\n})\nexport class AccessRequestComponent implements OnInit {\n  isPatient = false;\n  ds = new MatTableDataSource([]);\n\n  reloadButtonOptions: any = {\n    active: false,\n    text: 'Aktualisieren',\n    spinnerSize: 18,\n    raised: true,\n    buttonColor: 'default',\n    spinnerColor: 'accent'\n  };\n\n  applyFilter(filterValue: string) {\n    filterValue = filterValue.trim(); // Remove whitespace\n    filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\n    this.ds.filter = filterValue;\n  }\n\n  constructor(private router: Router,\n              private requestService:RequestService,\n              private stateService:StateService) {\n    this.isPatient = stateService.user.type === 'Patient';\n  }\n\n  ngOnInit() {\n    this.reloadData();\n  }\n\n  reloadData() {\n    this.reloadButtonOptions.active = true;\n    this.reloadButtonOptions.text = 'Lade Daten...';\n\n    this.requestService.get().subscribe(obs => {\n      obs = obs.sort((a , b) => {\n        return new Date(b.date).getTime() - new Date(a.date).getTime();\n      });\n      this.ds = new MatTableDataSource(obs);\n\n      setTimeout(() => {\n        this.reloadButtonOptions.active = false;\n        this.reloadButtonOptions.text = 'Aktualisieren';\n      }, 1000);\n\n    });\n  }\n\n  showScanner() {\n    this.router.navigate(['/qr-code-scanner']);\n  }\n\n  showResult(request: Request) {\n    this.router.navigate(['./access-request-result', request.id]);\n  }\n\n  accept(request:Request) {\n    this.router.navigate(['./access-request-details-user', request.id]);\n  }\n}\n","module.exports = \".hl-spinner {\\n    margin:20px auto;\\n  }\"","module.exports = \"<div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">\\n    <img src=\\\"assets/hl-logo.png\\\" style=\\\"margin:40px\\\">\\n  <mat-card fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">\\n    <mat-card-title>Login</mat-card-title>\\n    <mat-card-subtitle>Wählen Sie zur Identifizierung das Health Ledger Zertifikat auf Ihrem Gerät aus</mat-card-subtitle>\\n    <mat-card-content>\\n      <button mat-raised-button color=\\\"accent\\\" (click)=\\\"fileInput.click()\\\">\\n          <mat-icon>fingerprint</mat-icon>\\n          <span>Zertifikat auswählen</span>\\n          <input #fileInput type=\\\"file\\\" (change)=\\\"onChange($event)\\\" style=\\\"display:none;\\\" />\\n      </button>\\n      <mat-spinner *ngIf=showSpinner class=\\\"hl-spinner\\\"></mat-spinner>\\n      \\n    </mat-card-content>\\n  </mat-card>\\n</div>\\n\"","import { StorageService } from '../../services/storage.service';\nimport { StateService } from '../../services/state.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  showSpinner = false;\n\n  constructor(private storageService: StorageService, private stateService: StateService) { }\n\n  ngOnInit() {\n      if(this.storageService.getItem(\"FabricCert\")) {\n        this.showSpinner = true;\n      }\n      this.stateService.autoLoginFromStorage();\n  }\n\n  onChange(event) {\n    this.showSpinner = true;\n    var file = event.srcElement.files;\n    var reader = new FileReader();\n    reader.onload = (e) => {\n         this.stateService.login(reader.result);\n    }\n    reader.readAsText(file[0], \"UTF-8\");\n  }\n}\n","module.exports = \"\"","module.exports = \"\\n<div fxLayout=\\\"column\\\">\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\n        <mat-form-field fxFlex=\\\"70\\\">\\n            <input matInput (keyup)=\\\"treatmentList.filter = $event.target.value\\\" placeholder=\\\"Filter\\\">\\n        </mat-form-field>\\n        <div>\\n            <spinner-button [options]=\\\"reloadButtonOptions\\\" (click)=\\\"reloadData()\\\"></spinner-button>\\n        </div>\\n    </div>\\n\\n    <app-treatment-list #treatmentList [treatments]=\\\"treatments\\\" (onSelected)=\\\"onSelected($event)\\\"></app-treatment-list>\\n<div>\\n  \"","import { Component, OnInit } from '@angular/core';\nimport { Treatment } from '../../models/treatment.model';\nimport { TreatmentService } from '../../services/treatment.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-patient-overview',\n  templateUrl: './patient-overview.component.html',\n  styleUrls: ['./patient-overview.component.css']\n})\nexport class PatientOverviewComponent implements OnInit {\n  treatments:Array<Treatment>;\n\n  reloadButtonOptions: any = {\n    active: false,\n    text: 'Aktualisieren',\n    spinnerSize: 18,\n    raised: true,\n    buttonColor: 'default',\n    spinnerColor: 'accent'\n  };\n\n  constructor(private treatmentService:TreatmentService,\n              private router: Router) { }\n\n  ngOnInit() {\n    this.reloadData();\n  }\n\n  reloadData() {\n    this.reloadButtonOptions.active = true;\n    this.reloadButtonOptions.text = 'Lade Daten...';\n\n    this.treatmentService.get().subscribe(treatments => {\n      this.treatments = treatments;\n\n      setTimeout(() => {\n        this.reloadButtonOptions.active = false;\n        this.reloadButtonOptions.text = 'Aktualisieren';\n      }, 1000);\n    });\n  }\n\n  onSelected(treatment:Treatment) {\n    this.router.navigate(['patient-treatment', treatment.id]);\n  }\n\n}\n\n","module.exports = \"\"","module.exports = \"<div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"space-between stretch\\\" >\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" >\\n        <button mat-raised-button color=\\\"accent\\\" routerLink=\\\"/patient-overview\\\">Zurück</button>\\n    </div>\\n    <br />\\n    <app-treatment [treatment]=\\\"treatment\\\"></app-treatment>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Treatment } from '../../models/treatment.model';\nimport { ActivatedRoute } from '@angular/router';\nimport { TreatmentService } from '../../services/treatment.service';\n\n@Component({\n  selector: 'app-patient-treatment',\n  templateUrl: './patient-treatment.component.html',\n  styleUrls: ['./patient-treatment.component.css']\n})\nexport class PatientTreatmentComponent implements OnInit {\n  treatment:Treatment;\n\n  constructor(private route:ActivatedRoute,\n              private treatmentService:TreatmentService) { \n    this.route.params.map(p => p.id).subscribe(id => {\n      this.treatmentService.get().subscribe(treatments => {\n        this.treatment = treatments.find(t => t.id == id);\n      });\n    });}\n\n  ngOnInit() {\n    \n  }\n\n}\n","module.exports = \".scanner {\\n  width: 500px;\\n}\\n\"","module.exports = \"<div *ngIf=\\\"availableDevices\\\">\\n  <select (change)=\\\"onDeviceSelectChange($event.target.value)\\\">\\n    <!--<option value=\\\"\\\" [selected]=\\\"!selectedDevice\\\">No Device</option>-->\\n    <option *ngFor=\\\"let device of availableDevices\\\" [value]=\\\"device.deviceId\\\" [selected]=\\\"selectedDevice && device.deviceId === selectedDevice.deviceId\\\">{{ device.label }}</option>\\n  </select>\\n</div>\\n\\n<div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">\\n\\n  <zxing-scanner #scanner fxFlex class=\\\"scanner\\\" start=\\\"true\\\" [device]=\\\"selectedDevice\\\" (scanSuccess)=\\\"handleQrCodeResult($event)\\\"></zxing-scanner>\\n\\n  <mat-card *ngIf=\\\"!hasCameras\\\">\\n    <mat-card-title>Simulation</mat-card-title>\\n    <mat-card-content>\\n      <mat-form-field>\\n          <textarea matInput placeholder=\\\"PublicKey\\\" [(ngModel)]=\\\"customKey\\\"></textarea>\\n      </mat-form-field>\\n      <button mat-raised-button (click)=\\\"onSimulation()\\\">Simulieren</button>\\n    </mat-card-content>\\n  </mat-card>\\n<br/>\\n  <button mat-raised-button (click)=\\\"onCancel()\\\">Abbrechen</button>\\n\\n</div>\\n\"","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {ZXingScannerComponent} from '@zxing/ngx-scanner';\nimport {Router} from '@angular/router';\n\nimport { Result } from '@zxing/library';\n\n@Component({\n  selector: 'app-qr-code-scanner',\n  templateUrl: './qr-code-scanner.component.html',\n  styleUrls: ['./qr-code-scanner.component.css']\n})\nexport class QrCodeScannerComponent implements OnInit {\n\n  constructor(private router: Router) { }\n\n  @ViewChild('scanner')\n  scanner: ZXingScannerComponent;\n\n  hasCameras = false;\n  hasPermission: boolean;\n\n  availableDevices: MediaDeviceInfo[];\n  selectedDevice: MediaDeviceInfo;\n\n  customKey:string;\n\n  ngOnInit(): void {\n\n    this.scanner.camerasFound.subscribe((devices: MediaDeviceInfo[]) => {\n      this.hasCameras = true;\n\n      console.log('Devices: ', devices);\n      this.availableDevices = devices;\n\n      // selects the devices's back camera by default\n      this.scanner.changeDevice(devices[0]);\n      for (const device of devices) {\n           if (/back|rear|environment/gi.test(device.label)) {\n               this.scanner.changeDevice(device);\n               this.selectedDevice = device;\n               break;\n           }\n       }\n    });\n\n    this.scanner.camerasNotFound.subscribe((devices: MediaDeviceInfo[]) => {\n      console.error('An error has occurred when trying to enumerate your video-stream-enabled devices.');\n    });\n\n    this.scanner.permissionResponse.subscribe((answer: boolean) => {\n      this.hasPermission = answer;\n    });\n\n  }\n\n  handleQrCodeResult(resultString: string) {\n    console.log('Result: ', resultString);\n    let obj = null;\n    try {\n      obj = JSON.parse(resultString);\n    } catch(err) { console.log(err); }\n\n    if(obj == null)\n      return\n\n    this.router.navigate(['./access-request-details', obj.publicKey, obj.name]);\n  }\n\n  onCancel() {\n    this.router.navigate(['./access-requests']);\n  }\n\n  onSimulation() {\n    let obj = {\n      publicKey: this.customKey,\n      name: \"Tester\"\n    }\n\n    this.handleQrCodeResult(JSON.stringify(obj));\n  }\n\n  onDeviceSelectChange(selectedValue: string) {\n    console.log('Selection changed: ', selectedValue);\n    this.selectedDevice = this.scanner.getDeviceById(selectedValue);\n  }\n}\n","module.exports = \"qrcode {\\n  border: 1px solid black;\\n  width: -webkit-fit-content;\\n  width: -moz-fit-content;\\n  width: fit-content;\\n  height: -webkit-fit-content;\\n  height: -moz-fit-content;\\n  height: fit-content;\\n}\\n\\nimg {\\n  max-width: 500px !important;\\n  max-height: 500px !important;\\n}\\n\"","module.exports = \"<div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">\\n  <qrcode [qrdata]=\\\"userData\\\" [size]=\\\"1000\\\" [level]=\\\"'L'\\\"></qrcode>\\n  <br>\\n  <mat-form-field>\\n      <textarea matInput placeholder=\\\"PublicKey\\\" [value]=\\\"stateService.user.publicKey\\\"></textarea>\\n  </mat-form-field>\\n  <button mat-raised-button (click)=\\\"back()\\\">Zurück</button>\\n</div>\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport {UserService} from '../../services/user.service';\nimport {StateService} from '../../services/state.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-qr-code',\n  templateUrl: './qr-code.component.html',\n  styleUrls: ['./qr-code.component.css']\n})\nexport class QrCodeComponent implements OnInit {\n  public userData: string = null;\n  constructor(private router: Router, private stateService: StateService) {\n    this.userData = JSON.stringify({\n      'publicKey': this.stateService.user.publicKey,\n      'name': this.stateService.user.name\n    });\n  }\n  ngOnInit() {\n  }\n  back() {\n    this.router.navigate(['./login']);\n  }\n}\n","module.exports = \"td {\\n    min-height: 18px;\\n}\"","module.exports = \"<table mat-table [dataSource]=\\\"datasource\\\" class=\\\"mat-elevation-z8\\\">\\n\\n  <ng-container matColumnDef=\\\"date\\\">\\n    <th mat-header-cell *matHeaderCellDef> Datum </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\" data-label=\\\"Datum\\\"> {{element.date | date:'dd.MM.yyyy HH:mm'}} </td>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"doctor\\\">\\n    <th mat-header-cell *matHeaderCellDef> Arzt </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\" data-label=\\\"Arzt\\\"> {{element.doctor}} </td>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"title\\\">\\n    <th mat-header-cell *matHeaderCellDef> Titel </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\" data-label=\\\"Titel\\\"> {{element.diagnose?.title}} </td>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"actions\\\">\\n    <th mat-header-cell *matHeaderCellDef> Aktionen </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\" data-label=\\\"Aktionen\\\">\\n      <button mat-raised-button (click)=\\\"onSelected.emit(element)\\\">Details</button>\\n    </td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"['date', 'doctor', 'title', 'actions']\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: ['date', 'doctor', 'title', 'actions'];\\\"></tr>\\n</table>\\n\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport {MatTableDataSource} from '@angular/material';\nimport {Treatment} from '../../models/treatment.model';\n\n@Component({\n  selector: 'app-treatment-list',\n  templateUrl: './treatment-list.component.html',\n  styleUrls: ['./treatment-list.component.css']\n})\nexport class TreatmentListComponent implements OnInit {\n  datasource:MatTableDataSource<Treatment>;\n\n  @Input()\n  set treatments(treatments:Treatment[]){\n    if(treatments == null)\n      return;\n    treatments = treatments.sort((a , b) => {\n      return new Date(b.date).getTime() - new Date(a.date).getTime();\n    });\n\n    this.datasource = new MatTableDataSource(treatments);\n  }\n\n  @Input()\n  set filter(filter:string) {\n    filter = filter.trim(); // Remove whitespace\n    filter = filter.toLowerCase(); // MatTableDataSource defaults to lowercase matches\n    this.datasource.filter = filter;\n  }\n\n  @Output() \n  onSelected: EventEmitter<Treatment> = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"mat-card {\\n    margin-bottom:30px;\\n}\"","module.exports = \"<mat-card *ngIf=\\\"treatment?.diagnose\\\">\\n    <mat-card-title>Diagnose</mat-card-title>\\n    <mat-card-content>\\n      <mat-form-field>\\n        <input matInput placeholder=\\\"Bezeichnung\\\" [(ngModel)]=\\\"treatment?.diagnose.title\\\" readonly/>\\n      </mat-form-field>\\n      <mat-form-field>\\n        <textarea matInput placeholder=\\\"Beschreibung\\\" [(ngModel)]=\\\"treatment?.diagnose.description\\\" readonly></textarea>\\n      </mat-form-field>\\n    </mat-card-content>\\n</mat-card>\\n\\n<mat-card *ngIf=\\\"treatment?.prescription\\\">\\n    <mat-card-title>Rezept</mat-card-title>\\n    <mat-card-content>\\n      <mat-form-field>\\n        <input matInput placeholder=\\\"Wirkstoff\\\" [(ngModel)]=\\\"treatment?.prescription.drug\\\" readonly/>\\n      </mat-form-field>\\n      <mat-form-field>\\n        <input matInput placeholder=\\\"Dosierung\\\" [(ngModel)]=\\\"treatment?.prescription.dosage\\\" readonly/>\\n      </mat-form-field>\\n      <mat-form-field>\\n        <textarea matInput placeholder=\\\"Notiz\\\" [(ngModel)]=\\\"treatment?.prescription.note\\\" readonly></textarea>\\n      </mat-form-field>\\n    </mat-card-content>\\n</mat-card>\\n\\n<mat-card *ngIf=\\\"treatment?.attestation\\\">\\n    <mat-card-title>Arbeitsunfähigkeit</mat-card-title>\\n    <mat-card-content>\\n      <mat-form-field>\\n        <input matInput placeholder=\\\"Beginn der Arbeitsunfähigkeit\\\" [value]=\\\"treatment?.attestation.from | date:'dd.MM.yyyy'\\\" readonly />\\n      </mat-form-field>\\n      <mat-form-field>\\n        <input matInput placeholder=\\\"Ende der Arbeitsunfähigkeit\\\" [value]=\\\"treatment?.attestation?.to | date:'dd.MM.yyyy'\\\" readonly />\\n      </mat-form-field>\\n    </mat-card-content>\\n</mat-card>\"","import {Component, Input, OnInit} from '@angular/core';\nimport { Treatment } from '../../models/treatment.model';\n\n@Component({\n  selector: 'app-treatment',\n  templateUrl: './treatment.component.html',\n  styleUrls: ['./treatment.component.css']\n})\nexport class TreatmentComponent implements OnInit {\n\n  @Input()\n  treatment:Treatment;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  host: \"https://health-ledger.herokuapp.com/\",\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}